// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/cqqqq777/go-kitex-mall/cmd/api/config"
	"github.com/cqqqq777/go-kitex-mall/shared/errz"
	"github.com/cqqqq777/go-kitex-mall/shared/kitex_gen/user"
	"github.com/cqqqq777/go-kitex-mall/shared/log"
	"github.com/cqqqq777/go-kitex-mall/shared/response"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cqqqq777/go-kitex-mall/cmd/api/biz/model/api"
)

// GetVerification .
// @router /api/verification [POST]
func GetVerification(ctx context.Context, c *app.RequestContext) {
	resp := new(api.MallVerificationResponse)

	var err error
	var req api.MallVerificationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = errz.CodeInvalidParam
		resp.Msg = errz.MsgInvalidParam
		response.SendResp(c, resp)
		return
	}

	// call user service
	res, err := config.GlobalUserClient.GetVerification(ctx, &user.MallVerificationRequest{
		Email: req.Email,
	})
	if err != nil {
		log.Zlogger.Errorf("rpc call user service failed err:%s", err.Error())
		resp.Code = errz.CodeRpcCall
		resp.Msg = errz.MsgRpcCall
		response.SendResp(c, resp)
		return
	}

	// build response
	resp.Code = res.ComonResp.Code
	resp.Msg = res.ComonResp.Msg
	resp.Verification = res.Verification

	response.SendResp(c, resp)
}

// Register .
// @router /api/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	resp := new(api.MallUserRegisterResponse)

	var err error
	var req api.MallUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = errz.CodeInvalidParam
		resp.Msg = errz.MsgInvalidParam
		response.SendResp(c, resp)
		return
	}

	res, err := config.GlobalUserClient.Register(ctx, &user.MallUserRegisterRequest{
		Username:     req.Username,
		Password:     req.Password,
		Email:        req.Email,
		Verification: req.Verification,
	})
	if err != nil {
		log.Zlogger.Errorf("rpc call user service failed err:%s", err.Error())
		resp.Code = errz.CodeRpcCall
		resp.Msg = errz.MsgRpcCall
		response.SendResp(c, resp)
		return
	}

	// build response
	resp.Code = res.CommonResp.Code
	resp.Msg = res.CommonResp.Msg
	resp.Token = res.Token
	resp.UserID = res.UserId

	response.SendResp(c, resp)
}

// Login .
// @router /api/user/login [GET]
func Login(ctx context.Context, c *app.RequestContext) {
	resp := new(api.MallUserLoginResponse)

	var err error
	var req api.MallUserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = errz.CodeInvalidParam
		resp.Msg = errz.MsgInvalidParam
		response.SendResp(c, resp)
		return
	}

	res, err := config.GlobalUserClient.Login(ctx, &user.MallUserLoginRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		log.Zlogger.Errorf("rpc call user service failed err:%s", err.Error())
		resp.Code = errz.CodeRpcCall
		resp.Msg = errz.MsgRpcCall
		response.SendResp(c, resp)
		return
	}

	// build response
	resp.Code = res.CommonResp.Code
	resp.Msg = res.CommonResp.Msg
	resp.Token = res.Token

	response.SendResp(c, resp)
}
