// Code generated by Kitex v0.5.1. DO NOT EDIT.

package opereteservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	operate "github.com/cqqqq777/go-kitex-mall/shared/kitex_gen/operate"
)

func serviceInfo() *kitex.ServiceInfo {
	return opereteServiceServiceInfo
}

var opereteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "OpereteService"
	handlerType := (*operate.OpereteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteProduct":       kitex.NewMethodInfo(favoriteProductHandler, newOpereteServiceFavoriteProductArgs, newOpereteServiceFavoriteProductResult, false),
		"GetProductOperateInfo": kitex.NewMethodInfo(getProductOperateInfoHandler, newOpereteServiceGetProductOperateInfoArgs, newOpereteServiceGetProductOperateInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "operate",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*operate.OpereteServiceFavoriteProductArgs)
	realResult := result.(*operate.OpereteServiceFavoriteProductResult)
	success, err := handler.(operate.OpereteService).FavoriteProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOpereteServiceFavoriteProductArgs() interface{} {
	return operate.NewOpereteServiceFavoriteProductArgs()
}

func newOpereteServiceFavoriteProductResult() interface{} {
	return operate.NewOpereteServiceFavoriteProductResult()
}

func getProductOperateInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*operate.OpereteServiceGetProductOperateInfoArgs)
	realResult := result.(*operate.OpereteServiceGetProductOperateInfoResult)
	success, err := handler.(operate.OpereteService).GetProductOperateInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOpereteServiceGetProductOperateInfoArgs() interface{} {
	return operate.NewOpereteServiceGetProductOperateInfoArgs()
}

func newOpereteServiceGetProductOperateInfoResult() interface{} {
	return operate.NewOpereteServiceGetProductOperateInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteProduct(ctx context.Context, req *operate.MallFavoriteProductRequest) (r *operate.MallFavoriteProductResponse, err error) {
	var _args operate.OpereteServiceFavoriteProductArgs
	_args.Req = req
	var _result operate.OpereteServiceFavoriteProductResult
	if err = p.c.Call(ctx, "FavoriteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProductOperateInfo(ctx context.Context, req *operate.MallGetProductOperateInfoRequest) (r *operate.MallGetProductOperateInfoResponse, err error) {
	var _args operate.OpereteServiceGetProductOperateInfoArgs
	_args.Req = req
	var _result operate.OpereteServiceGetProductOperateInfoResult
	if err = p.c.Call(ctx, "GetProductOperateInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
